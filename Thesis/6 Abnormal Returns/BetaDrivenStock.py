# -*- coding: utf-8 -*-
"""
https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.mannwhitneyu.html
https://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U_test
https://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test

https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.stats.wilcoxon.html
"""
ticker= "SWED-A.ST"
INDEX = "^OMX"
import pandas as pd
import pandas_datareader as web
startdate= "2010"; enddate='2019-06-23'
df = pd.DataFrame()
df['Stock'] = web.DataReader(ticker, 'yahoo', start = startdate, end=enddate)['Adj Close'];
df['Index'] = web.DataReader(INDEX, 'yahoo', start = startdate, end=enddate)['Adj Close'];
df['StRet'] = df['Stock'].pct_change()
df['InRet'] = df['Index'].pct_change()
df = df.dropna()

# Stable Beta model
from statsmodels import regression
import statsmodels.api as sm
def linreg(market,stock):
    market = sm.add_constant(market)
    model = regression.linear_model.OLS(stock,market).fit()
    return model.params[0], model.params[1],model
alpha, beta, model = linreg(df['InRet'],df['StRet'])

# Generating Returns created by the market
df['MarketGenRets'] = df['InRet']*beta + alpha
import matplotlib.pyplot as plt
df['MarketGen'] = 0; df['MarketGen'].iloc[0] = df['Stock'].values[0]

# Calculating prices from Returns
for i in range(1,len(df['MarketGen'])):
    df['MarketGen'].iloc[i] = df['MarketGen'].iloc[i-1]*(1+df['MarketGenRets'][i-1])

fig, ax1 = plt.subplots()
LNS1 = ax1.plot(df['MarketGen'], label = 'Price generated ($\u03B1$ + $\u03B2$*$R_m$)', color = 'k')
LNS2 = ax1.plot(df['Stock']    , label = f'{ticker}')
#ax1.set_xlabel('Dates')
ax1.set_ylabel(f'{ticker} Prices')
LNS = LNS1 + LNS2 #+ LNS3
LABS = [l.get_label() for l in LNS]
ax1.legend(LNS,LABS, loc = 0); plt.title('Prices vs Prices generated by Market Model');plt.show()


# Calculating Abnormal Prices from Abnormal Returns
df['ABNrets'] = df['StRet'] - df['MarketGenRets']
df['ABNprices'] = 0
df['ABNprices'].iloc[0] = df['Stock'].values[0]
for i in range(1,len(df['MarketGen'])):
    df['ABNprices'].iloc[i] = df['ABNprices'].iloc[i-1] * (1+df['ABNrets'][i-1])

fig, ax1 = plt.subplots()
LNS1 = ax1.plot(df['ABNprices'], label = 'Price generated by $R_i$ - ($\u03B1$ + $\u03B2$*$R_m$) ', color = 'k')
LNS2 = ax1.plot(df['Stock']    , label = f'{ticker}')
#ax1.set_xlabel('Dates')
ax1.set_ylabel(f'{ticker} Prices')
LNS = LNS1 + LNS2 #+ LNS3
LABS = [l.get_label() for l in LNS]
ax1.legend(LNS,LABS, loc = 0); plt.title('Prices vs Prices generated by abnormal returns');plt.show()

# Calculating levels of outliers
STDDEV = df['StRet'].std(); MEAN = df['StRet'].mean()
df['SigmaLvl'] = (df['StRet'] - MEAN) / STDDEV
df['SigmaLvl'][df['SigmaLvl'].between(-2,2)] = 0
print('Number of positive outliers: %i' %(len(df['SigmaLvl'][df['SigmaLvl']>0])) )
print('Number of Negative outliers: %i' %(len(df['SigmaLvl'][df['SigmaLvl']<0])) )
dfP = pd.DataFrame(df['SigmaLvl'][df['SigmaLvl']>0]) # Dataframe for positive outliers
dfN = pd.DataFrame(df['SigmaLvl'][df['SigmaLvl']<0]) # Dataframe for Negative outliers

# df2 is for calculating returns before and after x days
df2 = df.copy()
# Calculating Abnormal returns around outliers
FORWARD = 5;BACK = 20
RANGE = range (-BACK,FORWARD)
for i in RANGE: df2[f'{i}'] = df['ABNrets'].shift(-i)
for i in RANGE: dfP[f'{i}'] = df2[f'{i}']
for i in RANGE: dfN[f'{i}'] = df2[f'{i}']

# Plotting Boxplots for abnormal returns
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(9, 4))
fig.tight_layout()
axes[0].boxplot(dfP.iloc[:,9:].values,showfliers=False)
axes[0].set_xticklabels(dfP.iloc[:,9:].columns)
axes[0].set_ylabel('Percentage Returns')
axes[0].set_title('Abnormal Returns around Positive Outliers')
axes[1].boxplot(dfN.iloc[:,9:].values,showfliers=False)
axes[1].set_xticklabels(dfN.iloc[:,9:].columns)
axes[1].set_ylabel('')
axes[1].set_title('Abnormal Returns around Negative Outliers')
plt.show()

# Welch's T-tests, for unequal variance and sample size.
from scipy import stats
REJECTWALPHA = 0.05
dfPtest = pd.Series( [stats.ttest_ind(dfP[str(i)], df['StRet'], equal_var = False)[1] for i in RANGE], index = RANGE )
dfNtest = pd.Series( [stats.ttest_ind(dfN[str(i)], df['StRet'], equal_var = False)[1] for i in RANGE], index = RANGE )
#for i in RANGE:print("%3ith day before Norm. P-val:%3.3f, Reject: %r"   %(i,dfPtest[i], dfPtest[i] < REJECTWALPHA ))
#for i in RANGE:print("%3ith day before Norm. P-val:%3.3f, Reject: %r"   %(i,dfNtest[i], dfNtest[i] < REJECTWALPHA ))

#Plot p-values
fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(9, 4))
fig.tight_layout()
LNS11 = axes[0].plot(dfPtest, color = 'k', label = 'Welch test')
axes[0].set_ylabel('P-values')
axes[0].set_title('For Abnormal Returns around Positive Outliers')
axes[0].axhline(y=0.05, color='r', linestyle='-')
LNS21 = axes[1].plot(dfNtest, color = 'k', label = 'Welch test')
axes[1].set_title('For Abnormal Returns around Negative Outliers')
axes[1].axhline(y=0.05, color='r', linestyle='-')

# Wilcoxon signed-rank test
from scipy import stats
REJECTWALPHA = 0.05
dfPtest2 = pd.Series( [stats.mannwhitneyu(dfP[str(i)], df['StRet'])[1] for i in RANGE], index = RANGE )
dfNtest2 = pd.Series( [stats.mannwhitneyu(dfN[str(i)], df['StRet'])[1] for i in RANGE], index = RANGE )
#for i in RANGE:print("%3ith day before Norm. P-val:%3.3f, Reject: %r"   %(i,dfPtest2[i], dfPtest2[i] < REJECTWALPHA ))
#for i in RANGE:print("%3ith day before Norm. P-val:%3.3f, Reject: %r"   %(i,dfNtest2[i], dfNtest2[i] < REJECTWALPHA ))

#Plot p-values
LNS12 = axes[0].plot(dfPtest2, color = 'r', label = 'Mann-Whitney rank test')
axes[0].set_title('For Abnormal Returns around Positive Outliers')
LNS22 = axes[1].plot(dfNtest2, color = 'r', label = 'Mann-Whitney rank test')
axes[1].set_title('For Abnormal Returns around Negative Outliers')
axes[1].axhline(y=0.05, color='r', linestyle='-')
LNS10 = LNS11 + LNS12; LABS1 = [l.get_label() for l in LNS10]
LNS20 = LNS21 + LNS22; LABS2 = [l.get_label() for l in LNS20]
axes[1].legend(LNS20, LABS2, loc =0)
plt.show()


